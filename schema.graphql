type FlashLoan @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  reserve: Reserve!
  target: Bytes!
  amount: BigInt!
  totalFee: BigInt!
  #protocolFee: BigInt!
  initiator: User!
  timestamp: Int!
}

type User @entity {
  """
  user address
  """
  id: ID!
  borrowedReservesCount: Int!
}

# service entity, when we receiving an event we should wknow which pool is it
type ContractToPoolMapping @entity {
  # contract address
  id: ID!
  pool: Pool!
}

type Protocol @entity {
  # just 1 for now
  id: ID!
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

type Pool @entity {
  id: ID!
  protocol: Protocol!
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolImpl: Bytes
  lendingPoolConfigurator: Bytes
  proxyPriceProvider: Bytes
  lendingRateOracle: Bytes
  configurationAdmin: Bytes
  ethereumAddress: Bytes
  emergencyAdmin: Bytes
  lastUpdateTimestamp: Int!

  reserves: [Reserve!]! @derivedFrom(field: "pool")

  active: Boolean!
  paused: Boolean!
}

type Reserve @entity {
  """
  Reserve address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  decimals: Int!
}